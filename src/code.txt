when flag clicked
set [ADDRESSING v] to [\["imp", "inx", "   ", "   ", "   ", "zp",  "zp",  "   ", "imp", "imm", "acc", "   ", "   ", "abs", "abs", "   ", "rel", "iny", "   ", "   ", "   ", "zpx", "zpx", "   ", "imp", "aby", "   ", "   ", "   ", "abx", "abx", "   ", "abs", "inx", "   ", "   ", "zp",  "zp",  "zp",  "   ", "imp", "imm", "acc", "   ", "abs", "abs", "abs", "   ", "rel", "iny", "   ", "   ", "   ", "zpx", "zpx", "   ", "imp", "aby", "   ", "   ", "   ", "abx", "abx", "   ", "imp", "inx", "   ", "   ", "   ", "zp",  "zp",  "   ", "imp", "imm", "acc", "   ", "abs", "abs", "abs", "   ", "rel", "iny", "   ", "   ", "   ", "zpx", "zpx", "   ", "imp", "aby", "   ", "   ", "   ", "abx", "abx", "   ", "imp", "inx", "   ", "   ", "   ", "zp",  "zp",  "   ", "imp", "imm", "acc", "   ", "ind", "abs", "abs", "   ", "rel", "iny", "   ", "   ", "   ", "zpx", "zpx", "   ", "imp", "aby", "   ", "   ", "   ", "abx", "abx", "   ", "   ", "inx", "   ", "   ", "zp",  "zp",  "zp",  "   ", "imp", "   ", "imp", "   ", "abs", "abs", "abs", "   ", "rel", "iny", "   ", "   ", "zpx", "zpx", "zpy", "   ", "imp", "aby", "imp", "   ", "   ", "abx", "   ", "   ", "imm", "inx", "imm", "   ", "zp",  "zp",  "zp",  "   ", "imp", "imm", "imp", "   ", "abs", "abs", "abs", "   ", "rel", "iny", "   ", "   ", "zpx", "zpx", "zpy", "   ", "imp", "aby", "imp", "   ", "abx", "abx", "aby", "   ", "imm", "inx", "   ", "   ", "zp",  "zp",  "zp",  "   ", "imp", "imm", "imp", "   ", "abs", "abs", "abs", "   ", "rel", "iny", "   ", "   ", "   ", "zpx", "zpx", "   ", "imp", "aby", "   ", "   ", "   ", "abx", "abx", "   ", "imm", "inx", "   ", "   ", "zp",  "zp",  "zp",  "   ", "imp", "imm", "imp", "   ", "abs", "abs", "abs", "   ", "rel", "iny", "   ", "   ", "   ", "zpx", "zpx", "   ", "imp", "aby", "   ", "   ", "   ", "abx", "abx", "   "\]]
set [OPCODES v] to [\["brk", "ora", "   ", "   ", "   ", "ora", "asl", "   ", "php", "ora", "asl", "   ", "   ", "ora", "asl", "   ", "bpl", "ora", "   ", "   ", "   ", "ora", "asl", "   ", "clc", "ora", "   ", "   ", "   ", "ora", "asl", "   ", "jsr", "and", "   ", "   ", "bit", "and", "rol", "   ", "plp", "and", "rol", "   ", "bit", "and", "rol", "   ", "bmi", "and", "   ", "   ", "   ", "and", "rol", "   ", "sec", "and", "   ", "   ", "   ", "and", "rol", "   ", "rti", "eor", "   ", "   ", "   ", "eor", "lsr", "   ", "pha", "eor", "lsr", "   ", "jmp", "eor", "lsr", "   ", "bvc", "eor", "   ", "   ", "   ", "eor", "lsr", "   ", "cli", "eor", "   ", "   ", "   ", "eor", "lsr", "   ", "rts", "adc", "   ", "   ", "   ", "adc", "ror", "   ", "pla", "adc", "ror", "   ", "jmp", "adc", "ror", "   ", "bvs", "adc", "   ", "   ", "   ", "adc", "ror", "   ", "sei", "adc", "   ", "   ", "   ", "adc", "ror", "   ", "   ", "sta", "   ", "   ", "sty", "sta", "stx", "   ", "dey", "   ", "txa", "   ", "sty", "sta", "stx", "   ", "bcc", "sta", "   ", "   ", "sty", "sta", "stx", "   ", "tya", "sta", "txs", "   ", "   ", "sta", "   ", "   ", "ldy", "lda", "ldx", "   ", "ldy", "lda", "ldx", "   ", "tay", "lda", "tax", "   ", "ldy", "lda", "ldx", "   ", "bcs", "lda", "   ", "   ", "ldy", "lda", "ldx", "   ", "clv", "lda", "tsx", "   ", "ldy", "lda", "ldx", "   ", "cpy", "cmp", "   ", "   ", "cpy", "cmp", "dec", "   ", "iny", "cmp", "dex", "   ", "cpy", "cmp", "dec", "   ", "bne", "cmp", "   ", "   ", "   ", "cmp", "dec", "   ", "cld", "cmp", "   ", "   ", "   ", "cmp", "dec", "   ", "cpx", "sbc", "   ", "   ", "cpx", "sbc", "inc", "   ", "inx", "sbc", "nop", "   ", "cpx", "sbc", "inc", "   ", "beq", "sbc", "   ", "   ", "   ", "sbc", "inc", "   ", "sed", "sbc", "   ", "   ", "   ", "sbc", "inc", "   "\]]
set [BYTEORDER v] to [little]
set [PAGE_WRAPPING_BUG v] to <false> //{"newRow":true}


define array1 (a) //{"blockType":"textReporter"}
return (in array [\[\]] add (a::custom))

define array2 (a) (b) //{"blockType":"textReporter"}
return (in array (in array [\[\]] add (a::custom)) add (b::custom))

define array3 (a) (b) (c) //{"blockType":"textReporter"}
return (in array (in array (in array [\[\]] add (a::custom)) add (b::custom)) add (c::custom))

define get (var) . (key) //{"blockType":"textReporter"}
return (get (key::custom) from (runtime var (var::custom)))

define set (var) . (key) to (value)
set runtime var (var::custom) to (set (key::custom) to (value::custom) in (runtime var (var::custom)))

define change (var) . (key) by (value)
set (var::custom) . (key::custom) to ((get (key::custom) from (runtime var (var::custom))) + (value::custom))

define set2 (var1) (var2) to (value)
set runtime var (var1::custom) to (in array (value::custom) get [0])
set runtime var (var2::custom) to (in array (value::custom) get [1])

define set3 (var1) (var2) (var3) to (value)
set runtime var (var1::custom) to (in array (value::custom) get [0])
set runtime var (var2::custom) to (in array (value::custom) get [1])
set runtime var (var3::custom) to (in array (value::custom) get [2]) //{"newRow":true}

define P___init__(memory) //{"blockType":"textReporter", "comment": "Initialize the processor."}
set runtime var [self] to [{}]
set [self] . [memory] to (memory::custom)
set [self] . [reg_a] to [0]
set [self] . [reg_y] to [0]
set [self] . [reg_x] to [0]
set [self] . [program_counter] to [0]
set [self] . [stack_pointer] to [0]
set [self] . [instructions] to [0]
set [self] . [flag_c] to <true>
set [self] . [flag_z] to <true>
set [self] . [flag_i] to <true>
set [self] . [flag_d] to <true>
set [self] . [flag_b] to <true>
set [self] . [flag_v] to <true>
set [self] . [flag_n] to <true>
return (runtime var [self])

define P_reset(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set [self] . [program_counter] to ([1111110011100010] to number) //0xFCE2
set [self] . [stack_pointer] to ([000111111101] to number) // 0x01FD
set [self] . [instructions] to [0]
set [self] . [flag_i] to <true>
set [self] . [flag_d] to <false>
set [self] . [flag_b] to <true>
return (array2 (runtime var [self]) [null])


define P_fetch_byte(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [data] to (P_read_byte (runtime var [self]) (get [self] . [program_counter]))
change [self] . [program_counter] by [1]
return (array2 (runtime var [self]) (runtime var [data]))

define P_fetch_word(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [data] to (P_read_word (runtime var [self]) (get [self] . [program_counter]))
change [self] . [program_counter] by [2]
return (array2 (runtime var [self]) (runtime var [data]))

define P_read_byte(self) (address) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set runtime var [data] to (M___getitem__ (get [self] . [memory]) (address::custom))
return (array2 (runtime var [self]) (runtime var [data]))

define P_read_word(self) (address) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
if <<(PAGE_WRAPPING_BUG)> and <  ((address::custom) and [255]) = [255]>  > then // 0xFF = 255
    set runtime var [second_address] to ((address::custom) and [65280]) // 0xFF00 = 65280
else
    set runtime var [second_address] to (((address::custom) + [1]) and [65535]) // 0xFFFF = 65535
end
set2 [self] [t1] to (P_read_byte (runtime var [self]) (address::custom))
set2 [self] [t2] to (P_read_byte (runtime var [self]) (runtime var [second_address]))
if <(BYTEORDER) = [little]> then
    set runtime var [data] to (  (runtime var [t1]) or ((runtime var [t2]) \<\< [8])  )
else
    set runtime var [data] to (  ((runtime var [t1]) \<\< [8]) or (runtime var [t2])  )
end
return (array2 (runtime var [self]) (runtime var [data]))

define P_write_byte(self) (address) (value) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set [self] . [memory] to (M___setitem__ (get [self] . [memory]) (address::custom) ((value::custom) and [255]) )
return (array2 (runtime var [self]) [null])

define P_write_word(self) (address) (value) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
if <(BYTEORDER) = [little]> then
    set runtime var [value1] to ((value::custom) and [255])
    set runtime var [value2] to (((value::custom) >> [8]) and [255])
else
    set runtime var [value1] to (((value::custom) >> [8]) and [255])
    set runtime var [value2] to ((value::custom) and [255])
end
set2 [self] [_] to (P_write_byte (runtime var [self]) (address::custom) (runtime var [value1]))
set2 [self] [_] to (P_write_byte (runtime var [self]) ((address::custom)+[1]) (runtime var [value2]))
return (array2 (runtime var [self]) [null])

define P_read_flags_register(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set runtime var [data] to [0]
set runtime var [data] to (  (runtime var [data]) or (if <(get [self] . [flag_n])> then [128] else [0])  )
set runtime var [data] to (  (runtime var [data]) or (if <(get [self] . [flag_v])> then  [64] else [0])  )
set runtime var [data] to (  (runtime var [data]) or (if <(get [self] . [flag_b])> then  [16] else [0])  )
set runtime var [data] to (  (runtime var [data]) or (if <(get [self] . [flag_d])> then   [8] else [0])  )
set runtime var [data] to (  (runtime var [data]) or (if <(get [self] . [flag_i])> then   [4] else [0])  )
set runtime var [data] to (  (runtime var [data]) or (if <(get [self] . [flag_z])> then   [2] else [0])  )
set runtime var [data] to (  (runtime var [data]) or (if <(get [self] . [flag_c])> then   [1] else [0])  )
return (array2 (runtime  var [self]) (runtime var [data]))

define P_set_flags_register(self) (data) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set [self] . [flag_n] to <(((data::custom) >> [7]) and [1])>
set [self] . [flag_v] to <(((data::custom) >> [6]) and [1])>
set [self] . [flag_d] to <(((data::custom) >> [3]) and [1])>
set [self] . [flag_i] to <(((data::custom) >> [2]) and [1])>
set [self] . [flag_z] to <(((data::custom) >> [1]) and [1])>
set [self] . [flag_c] to <(((data::custom) >> [0]) and [1])>
return (array2 (runtime  var [self]) [null])

define P_push_byte(self) (data) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set [self] . [memory] to (M___setitem__  (get [self] . [memory]) (get [self] . [stack_pointer]) (data::custom)  )
change [self] . [stack_pointer] by [-1]
return (array2 (runtime  var [self]) [null])

define P_push_word(self) (data) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
if <(BYTEORDER) = [little]> then
    set runtime var [value1] to ((data::custom) and [255])
    set runtime var [value2] to (((data::custom) >> [8]) and [255])
else
    set runtime var [value1] to (((data::custom) >> [8]) and [255])
    set runtime var [value2] to ((data::custom) and [255])
end
set2 [self] [_] to (P_push_byte (runtime var [self]) (runtime var [value1]))
set2 [self] [_] to (P_push_byte (runtime var [self]) (runtime var [value2]))
return (array2 (runtime  var [self]) [null])

define P_pop_byte(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
change [self] . [stack_pointer] by [1]
set runtime var [data] to (M___getitem__ (get [self] . [memory]) (get [self] . [stack_pointer]))
return (array2 (runtime  var [self]) (runtime var [data]))

define P_pop_word(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [t1] to (P_pop_byte (runtime var [self]))
set2 [self] [t2] to (P_pop_byte (runtime var [self]))
if <(BYTEORDER) = [little]> then
    set runtime var [data] to (((runtime var [t1]) \<\< [8]) or (runtime var [t2]))
else
    set runtime var [data] to ((runtime var [t1]) or ((runtime var [t2]) \<\< [8]))
end
return (array2 (runtime  var [self]) (runtime var [data])) //{"newRow":true}


define P_evaluate_flag_n(self) (data) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set [self] . [flag_n] to <((data::custom) and [128])>
return (array2 (runtime  var [self]) [null])

define P_evaluate_flag_z(self) (data) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set [self] . [flag_z] to <(data::custom) = [0]>
return (array2 (runtime  var [self]) [null])

define P_evaluate_flags_nz(self) (data) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [_] to (P_evaluate_flag_n (runtime var [self]) (data::custom))
set2 [self] [_] to (P_evaluate_flag_z (runtime var [self]) (data::custom))
return (array2 (runtime  var [self]) [null])

define P_evaluate_flags_nz_a(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [_] to (P_evaluate_flags_nz (runtime var [self]) (get [self] . [reg_a]))
return (array2 (runtime  var [self]) [null])

define P_evaluate_flags_nz_x(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [_] to (P_evaluate_flags_nz (runtime var [self]) (get [self] . [reg_x]))
return (array2 (runtime  var [self]) [null])

define P_evaluate_flags_nz_y(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [_] to (P_evaluate_flags_nz (runtime var [self]) (get [self] . [reg_y]))
return (array2 (runtime  var [self]) [null]) //{"newRow":true}

define P_execute(self) (instructions)
set runtime var [self] to (self::custom)
while <(get [self] . [instructions]) < (instructions::custom)>
    set2 [self] [opcode_num] to (P_fetch_byte (runtime var [self]))
    set runtime var [opcode] to (in array (OPCODES) get (runtime var [opcode_num]))
    set runtime var [addressing_mode] to (in array (ADDRESSING) get (runtime var [opcode_num]))
    if <(runtime var [opcode]) = [   ]> then
        set runtime var [opcode] to [nop]
        set runtime var [addressing_mode] to [imp]
    end
    set runtime var [instr_func] to (join [P_ins_] (runtime var [opcode]))
    if <  <(runtime var [addressing_mode]) = [imp]> or <array [\["JMP", "JSR"\]] contains (runtime var [opcode])>  > then
        set runtime var [func_args] to (array2 (runtime var [self]) (runtime var [addressing_mode]))
    else
        set runtime var [addressing_func] to (join [P_addressing_] (runtime var [addressing_mode]))
        set3 [self] [operand] [args] to (help_call_with (runtime var [addressing_func]) (array1 (runtime var [self])))
        set runtime var [func_args] to (array3 (runtime var [self]) (runtime var [addressing_mode]) (runtime var [operand]))
        set runtime var [func_args] to (add items from array (runtime var [args]) to array (runtime var [func_args]))
    end
    set2 [self] [_] to (help_call_with (runtime var [instr_func]) (runtime var [func_args]))
    change [self] . [instructions] by [1]
end
return (array2 (runtime var [self]) [null]) //{"newRow":true}


define P_addressing_imm(self) //{"blockType":"textReporter","comment":"Addressing for the MOT-6502"}
set runtime var [self] to (self::custom)
set2 [self] [operand] to (P_fetch_byte (runtime var [self]))
return (array3 (runtime var [self]) (runtime var [operand]) [\[\]])

define P_addressing_zp(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [address] to (P_fetch_byte (runtime var [self]))
set2 [self] [operand] to (P_read_byte (runtime var [self]) (runtime var [address]))
return (  array3 (runtime var [self]) (runtime var [operand]) (array1 (runtime var [address]))  )

define P_addressing_zpx(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [base_address] to (P_fetch_byte (runtime var [self]))
set runtime var [address] to (((runtime var [base_address]) + (get [self] . [reg_x])) and [255])
set2 [self] [operand] to (P_read_byte (runtime var [self]) (runtime var [address]))
return (  array3 (runtime var [self]) (runtime var [operand]) (array1 (runtime var [address]))  )

define P_addressing_zpy(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [base_address] to (P_fetch_byte (runtime var [self]))
set runtime var [address] to (((runtime var [base_address]) + (get [self] . [reg_y])) and [255])
set2 [self] [operand] to (P_read_byte (runtime var [self]) (runtime var [address]))
return (  array3 (runtime var [self]) (runtime var [operand]) (array1 (runtime var [address]))  )

define P_addressing_abs(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [address] to (P_fetch_word (runtime var [self]))
set2 [self] [operand] to (P_read_byte (runtime var [self]) (runtime var [address]))
return (  array3 (runtime var [self]) (runtime var [operand]) (array1 (runtime var [address]))  )

define P_addressing_abx(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [base_address] to (P_fetch_word (runtime var [self]))
set runtime var [address] to (((runtime var [base_address]) + (get [self] . [reg_x])) and [65535])
set2 [self] [operand] to (P_read_byte (runtime var [self]) (runtime var [address]))
return (  array3 (runtime var [self]) (runtime var [operand]) (array1 (runtime var [address]))  )

define P_addressing_aby(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [base_address] to (P_fetch_word (runtime var [self]))
set runtime var [address] to (((runtime var [base_address]) + (get [self] . [reg_y])) and [65535])
set2 [self] [operand] to (P_read_byte (runtime var [self]) (runtime var [address]))
return (  array3 (runtime var [self]) (runtime var [operand]) (array1 (runtime var [address]))  )

define P_addressing_ind(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [address] to (P_fetch_word (runtime var [self]))
set2 [self] [operand] to (P_read_byte (runtime var [self]) (runtime var [address]))
return (  array3 (runtime var [self]) (runtime var [operand]) (array1 (runtime var [address]))  )

define P_addressing_inx(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [base_address] to (P_fetch_byte (runtime var [self]))
set runtime var [zp_address] to (((runtime var [base_address]) + (get [self] . [reg_x])) and [255])
set2 [self] [final_address] to (P_read_word (runtime var [self]) (runtime var [zp_address]))
set2 [self] [operand] to (P_read_byte (runtime var [self]) (runtime var [final_address]))
return (  array3 (runtime var [self]) (runtime var [operand]) (array1 (runtime var [final_address]))  )

define P_addressing_iny(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [base_address] to (P_fetch_byte (runtime var [self]))
set2 [self] [zp_address] to (P_read_word (runtime var [self]) (runtime var [base_address]))
set runtime var [final_address] to (((runtime var [zp_address]) + (get [self] . [reg_y])) and [65535])
set2 [self] [operand] to (P_read_byte (runtime var [self]) (runtime var [final_address]))
return (  array3 (runtime var [self]) (runtime var [operand]) (array1 (runtime var [final_address]))  )

define P_addressing_rel(self) //{"blockType":"textReporter"}
set runtime var [self] to (self::custom)
set2 [self] [operand] to (P_fetch_byte (runtime var [self]))
return (array3 (runtime var [self]) (runtime var [operand]) [\[\]])

define P_addressing_acc(self) //{"blockType":"textReporter"}
return (array3 (runtime var [self]) (get [self] . [reg_a]) [\[\]]) //{"newRow":true}


define help_call_with(func_name) (args) //{"blockType":"textReporter","comment":"Subroutines for the MOT-6502"}
set3 [arg0] [arg1] [arg2] to (args::custom)
switch (func_name::custom)
    case [P_addressing_imm]
        return (P_addressing_imm (runtime var [arg0]))
    end
    case [P_addressing_zp]
        return (P_addressing_zp  (runtime var [arg0]))
    end
    case [P_addressing_zpx]
        return (P_addressing_zpx (runtime var [arg0]))
    end
    case [P_addressing_zpy]
        return (P_addressing_zpy (runtime var [arg0]))
    end
    case [P_addressing_abs]
        return (P_addressing_abs (runtime var [arg0]))
    end
    case [P_addressing_abx]
        return (P_addressing_abx (runtime var [arg0]))
    end
    case [P_addressing_aby]
        return (P_addressing_aby (runtime var [arg0]))
    end
    case [P_addressing_ind]
        return (P_addressing_ind (runtime var [arg0]))
    end
    case [P_addressing_inx]
        return (P_addressing_inx (runtime var [arg0]))
    end
    case [P_addressing_iny]
        return (P_addressing_iny (runtime var [arg0]))
    end
    case [P_addressing_rel]
        return (P_addressing_rel (runtime var [arg0]))
    end
    case [P_addressing_acc]
        return (P_addressing_acc (runtime var [arg0]))
    end

say [HI] //{"newRow":true}


define M___getitem__(self) (address) //{"blockType":"textReporter"}
set runtime var [mself] to (self::custom)

define M___setitem__(self) (address) (value) //{"blockType":"textReporter"}
set runtime var [mself] to (self::custom)

