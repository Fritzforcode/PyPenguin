opcodeDatabase = {
# CATEGORIES
    # Motion (Incomplete)
    # Looks (Incomplete)
    # Sound (Incomplete)
    # Events (Incomplete)
        # Events: Keys
        "event_whenkeypressed": {
            "type": "hat",
            "category": "Events",
            "newOpcode": "when [KEY] key pressed",
            "inputTypes": {},
            "optionTypes": {"KEY": "key"},
            "optionTranslation": {"KEY_OPTION": "KEY"},
        },
        "event_whenbroadcastreceived": {
            "type": "hat",
            "category": "Events",
            "newOpcode": "when i receive [BROADCAST]",
            "inputTypes": {},
            "optionTypes": {"BROADCAST": "broadcast"},
            "optionTranslation": {"BROADCAST_OPTION": "BROADCAST"},
        },
        "event_broadcast": {
            "type": "instruction",
            "category": "Events",
            "newOpcode": "broadcast [BROADCAST]",
            "inputTypes": {"BROADCAST": "broadcast"},
            "inputTranslation": {"BROADCAST_INPUT": "BROADCAST"},
            "optionTypes": {},
        },
    # Control (Incomplete)
        # Control: Timing
        "control_wait": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "wait (DURATION) seconds",
            "inputTypes": {"DURATION": "positive number"},
            "optionTypes": {},
        },
        "control_waitsecondsoruntil": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "wait (DURATION) seconds or until <CONDITION>",
            "inputTypes": {"DURATION": "positive number", "CONDITION": "boolean"},
            "optionTypes": {},
        },
        # Control: Loops
        "control_repeat": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "repeat (TIMES) {BODY}",
            "inputTypes": {"TIMES": "number", "BODY": "script"},
            "inputTranslation": {"SUBSTACK": "BODY"},
            "optionTypes": {},
        },
        "control_forever": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "forever {BODY}",
            "inputTypes": {"BODY": "script"},
            "inputTranslation": {"SUBSTACK": "BODY"},
            "optionTypes": {},
        },
        "control_exitLoop": {
            "type": "lastInstruction",
            "category": "Control",
            "newOpcode": "escape loop",
            "inputTypes": {},
            "optionTypes": {},
        },
        "control_continueLoop": {
            "type": "lastInstruction",
            "category": "Control",
            "newOpcode": "continue loop",
            "inputTypes": {},
            "optionTypes": {},
        },
        # Control: Switches and Cases
        "control_switch": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "switch (CONDITION) {CASES}",
            "inputTypes": {"CONDITION": "text", "CASES": "script"},
            "inputTranslation": {"SUBSTACK": "CASES"},
            "optionTypes": {},
        },
        "control_switch_default": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "switch (CONDITION) {CASES} default {DEFAULT}",
            "inputTypes": {"CONDITION": "text", "CASES": "script", "DEFAULT": "script"},
            "inputTranslation": {"SUBSTACK1": "CASES", "SUBSTACK2": "DEFAULT"},
            "optionTypes": {},
        },
        "control_exitCase": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "exit case",
            "inputTypes": {},
            "optionTypes": {},
        },
        "control_case_next": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "run next case when (CONDITION)",
            "inputTypes": {"CONDITION": "text"},
            "optionTypes": {},
        },
        "control_case": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "case (CONDITION) {BODY}",
            "inputTypes": {"CONDITION": "text", "BODY": "script"},
            "inputTranslation": {"SUBSTACK": "BODY"},
            "optionTypes": {},
        },
        # Control: Conditionals
        "control_if": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "if <CONDITION> then {THEN}",
            "inputTypes": {"CONDITION": "boolean", "THEN": "script"},
            "inputTranslation": {"SUBSTACK": "THEN"},
            "optionTypes": {},
        },
        "control_if_else": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "if <CONDITION> then {THEN} else {ELSE}",
            "inputTypes": {"CONDITION": "boolean", "THEN": "script", "ELSE": "script"},
            "inputTranslation": {"SUBSTACK": "THEN", "SUBSTACK2": "ELSE"},
            "optionTypes": {},
        },
        "control_wait_until": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "wait until <CONDITION>",
            "inputTypes": {"CONDITION": "boolean"},
            "optionTypes": {},
        },
        "control_repeat_until": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "repeat until <CONDITION> {BODY}",
            "inputTypes": {"CONDITION": "boolean", "BODY": "script"},
            "inputTranslation": {"SUBSTACK": "BODY"},
            "optionTypes": {},
        },
        "control_while": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "while <CONDITION> {BODY}",
            "inputTypes": {"CONDITION": "boolean", "BODY": "script"},
            "inputTranslation": {"SUBSTACK": "BODY"},
            "optionTypes": {},
        },
        "control_for_each": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "for each [VARIABLE] in (RANGE) {BODY}",
            "inputTypes": {"RANGE": "positive integer", "BODY": "script"},
            "inputTranslation": {"VALUE": "RANGE"},
            "optionTypes": {"VARIABLE": "variable"},
        },
        "control_if_return_else_return": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "if <CONDITION> then (TRUEVALUE) else (FALSEVALUE)",
            "inputTypes": {"CONDITION": "boolean", "TRUEVALUE": "text", "FALSEVALUE": "text"},
            "inputTranslation": {"boolean": "CONDITION", "TEXT1": "TRUEVALUE", "TEXT2": "FALSEVALUE"},
            "optionTypes": {},
        },
        "control_all_at_once": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "all at once {BODY}",
            "inputTypes": {"BODY": "script"},
            "optionTypes": {},
        },
        # Control: Error Management
        "control_try_catch": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "try to do {TRY} if a block errors {IFERROR}",
            "inputTypes": {"TRY": "script", "IFERROR": "script"},
            "inputTranslation": {"SUBSTACK": "TRY", "SUBSTACK2": "IFERROR"},
            "optionTypes": {},
        },
        "control_throw_error": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "throw error (ERROR)",
            "inputTypes": {"ERROR": "text"},
            "optionTypes": {},
        },
        "control_error": {
            "type": "textReporter",
            "category": "Control",
            "newOpcode": "error", # yes that is correct
            "inputTypes": {},
            "optionTypes": {},
        },
        # Control: Extras
        "control_backToGreenFlag": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "run flag", # "run" is not clear enough; so i added "flag"
            "inputTypes": {},
            "optionTypes": {},
        },
        "control_stop_sprite": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "stop [TARGET]",
            "inputTypes": {},
            "optionTypes": {"TARGET": "cloning target"},
            "optionTranslation": {"STOP_OPTION": "TARGET"},
        },
        "control_stop_sprite_menu": {
            "type": "textReporter",
            "category": "Control",
            "newOpcode": "STOP SPRITE MENU",
            "inputTypes": {},
            "optionTypes": {"TARGET": "cloning target"},
            "optionTranslation": {"CLONE_OPTION": "TARGET"},
        },
        "control_stop": {
            "type": "dynamic", # When "other scripts in sprite" is selected it isn't an ending block
            "category": "Control",
            "newOpcode": "stop [TARGET]",
            "inputTypes": {},
            "optionTypes": {"TARGET": "stop script target"},
            "optionTranslation": {"STOP_OPTION": "TARGET"},
        },
        # TODO: add "control stop sprite" and add sprite dropdown menus to the following blocks:
        # Control: Clones
        "control_start_as_clone": {
            "type": "hat",
            "category": "Control",
            "newOpcode": "when I start as a clone",
            "inputTypes": {},
            "optionTypes": {},
        },
        "control_create_clone_of": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "create clone of [TARGET]",
            "inputTypes": {},
            "optionTypes": {"TARGET": "cloning target"},
        },
        "control_delete_clones_of": {
            "type": "instruction",
            "category": "Control",
            "newOpcode": "delete clones of [TARGET]",
            "inputTypes": {},
            "optionTypes": {"TARGET": "cloning target"},
        },
        "control_delete_this_clone": {
            "type": "lastInstruction",
            "category": "Control",
            "newOpcode": "delete this clone",
            "inputTypes": {},
            "optionTypes": {},
        },
    # Sensing (Incomplete)
    # Operators (Incomplete)
        # Operators: Math Part 1
        "operator_add": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "(NUM1) + (NUM2)",
            "inputTypes": {"NUM1": "number", "NUM2": "number"},
            "optionTypes": {},
        },
        "operator_subtract": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "(NUM1) - (NUM2)",
            "inputTypes": {"NUM1": "number", "NUM2": "number"},
            "optionTypes": {},
        },
        "operator_multiply": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "(NUM1) * (NUM2)",
            "inputTypes": {"NUM1": "number", "NUM2": "number"},
            "optionTypes": {},
        },
        "operator_divide": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "(NUM1) / (NUM2)",
            "inputTypes": {"NUM1": "number", "NUM2": "number"},
            "optionTypes": {},
        },
        "operator_advMath": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "(NUM1) [OPERATION] (NUM2)",
            "inputTypes": {"NUM1": "number", "NUM2": "number"},
            "inputTranslation": {"ONE": "NUM1", "TWO": "NUM2"},
            "optionTypes": {"OPERATION": "binary math operation"},
            "optionTranslation": {"OPTION": "OPERATION"},
        },
        "operator_random": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "pick random (NUM1) to (NUM2)",
            "inputTypes": {"NUM1": "number", "NUM2": "number"},
            "inputTranslation": {"FROM": "NUM1", "TO": "NUM2"},
            "optionTypes": {},
        },
        "operator_constrainnumber": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "constrain (NUM) min (MIN) max (MAX)",
            "inputTypes": {"NUM": "number", "MIN": "number", "MAX": "number"},
            "inputTranslation": {"inp": "NUM", "min": "MIN", "max": "MAX"},
            "optionTypes": {},
        },
        "operator_lerpFunc": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "interpolate (NUM1) to (NUM2) by (WEIGHT)",
            "inputTypes": {"NUM1": "number", "NUM2": "number", "WEIGHT": "number"},
            "inputTranslation": {"ONE": "NUM1", "TWO": "NUM2", "AMOUNT": "WEIGHT"},
            "optionTypes": {},
        },
        # Operators: Comparators
        "operator_gt": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "(OPERAND1) = (OPERAND2)",
            "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
            "optionTypes": {},
        },
        "operator_gtorequal": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "(OPERAND1) >= (OPERAND2)",
            "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
            "optionTypes": {},
        },
        "operator_lt": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "(OPERAND1) < (OPERAND2)",
            "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
            "optionTypes": {},
        },
        "operator_ltorequal": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "(OPERAND1) <= (OPERAND2)",
            "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
            "optionTypes": {},
        },
        "operator_equals": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "(OPERAND1) = (OPERAND2)",
            "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
            "optionTypes": {},
        },
        "operator_notequal": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "(OPERAND1) != (OPERAND2)",
            "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
            "optionTypes": {},
        },        
        # Operators: True and False
        "operator_trueBoolean": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "true",
            "inputTypes": {},
            "optionTypes": {},
        },
        "operator_falseBoolean": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "false",
            "inputTypes": {},
            "optionTypes": {},
        },
        # Operators: Boolean Algebra
        "operator_and": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "<OPERAND1> and <OPERAND2>",
            "inputTypes": {"OPERAND1": "boolean", "OPERAND2": "boolean"},
            "optionTypes": {},
        },
        "operator_or": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "<OPERAND1> or <OPERAND2>",
            "inputTypes": {"OPERAND1": "boolean", "OPERAND2": "boolean"},
            "optionTypes": {},
        },
        "operator_not": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "not <OPERAND>",
            "inputTypes": {"OPERAND": "boolean"},
            "optionTypes": {},
        },
        # Operators: Newline and Tab
        "operator_newLine": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "new line",
            "inputTypes": {},
            "optionTypes": {},
        },
        "operator_tabCharacter": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "tab character",
            "inputTypes": {},
            "optionTypes": {},
        },
        # Operators: Text Manipulation
        "operator_join": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "join (STRING1) (STRING2)",
            "inputTypes": {"STRING1": "text", "STRING2": "text"},
            "optionTypes": {},
        },
        "operator_join3": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "join (STRING1) (STRING2) (STRING3)",
            "inputTypes": {"STRING1": "text", "STRING2": "text", "STRING3": "text"},
            "optionTypes": {},
        },
        "operator_indexOfTextInText": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "index of (SUBSTRING) in (TEXT)",
            "inputTypes": {"SUBSTRING": "text", "TEXT": "text"},
            "inputTranslation": {"TEXT1": "SUBSTRING", "TEXT2": "TEXT"},
            "optionTypes": {},
        },
        "operator_lastIndexOfTextInText": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "last index of (SUBSTRING) in (TEXT)",
            "inputTypes": {"SUBSTRING": "text", "TEXT": "text"},
            "inputTranslation": {"TEXT1": "SUBSTRING", "TEXT2": "TEXT"},
            "optionTypes": {},
        },
        "operator_letter_of": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "letter (LETTER) of (STRING)",
            "inputTypes": {"LETTER": "positive integer", "STRING": "text"},
            "optionTypes": {},
        },
        "operator_getLettersFromIndexToIndexInText": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "letters from (START) to (STOP) in (TEXT)",
            "inputTypes": {"START": "positive integer", "STOP": "text", "TEXT": "text"},
            "inputTranslation": {"INDEX1": "START", "INDEX2": "STOP"},
            "optionTypes": {},
        },
        "operator_length": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "length of (TEXT)",
            "inputTypes": {"TEXT": "text"},
            "inputTranslation": {"STRING": "TEXT"},
            "optionTypes": {},
        },
        "operator_contains": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "(TEXT) contains (SUBSTRING) ?",
            "inputTypes": {"TEXT": "text", "SUBSTRING": "text"},
            "inputTranslation": {"STRING1": "TEXT", "STRING2": "SUBSTRING"},
            "optionTypes": {},
        },
        "operator_textStartsOrEndsWith": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "(TEXT) [OPERATION] with (SUBSTRING) ?",
            "inputTypes": {"TEXT": "text", "SUBSTRING": "text"},
            "inputTranslation": {"TEXT1": "TEXT", "TEXT2": "SUBSTRING"},
            "optionTypes": {"OPERATION": "text operation"},
            "optionTranslation": {"OPTION": "OPERATION"},
        },
        "operator_replaceAll": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "in (TEXT) replace all (OLDVALUE) with (NEWVALUE)",
            "inputTypes": {"TEXT": "text", "OLDVALUE": "text", "NEWVALUE": "text"},
            "inputTranslation": {"text": "TEXT", "term": "OLDVALUE", "res": "NEWVALUE"},
            "optionTypes": {},
        },
        "operator_replaceFirst": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "in (TEXT) replace first (OLDVALUE) with (NEWVALUE)",
            "inputTypes": {"TEXT": "text", "OLDVALUE": "text", "NEWVALUE": "text"},
            "inputTranslation": {"text": "TEXT", "term": "OLDVALUE", "res": "NEWVALUE"},
            "optionTypes": {},
        },
        "operator_regexmatch": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "match (TEXT) with regex (REGEX) (MODIFIER)",
            "inputTypes": {"TEXT": "text", "REGEX": "text", "MODIFIER": "text"},
            "inputTranslation": {"text": "TEXT", "reg": "REGEX", "regrule": "MODIFIER"},
            "optionTypes": {},
        },
        "operator_toUpperLowerCase": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "(TEXT) to [CASE]",
            "inputTypes": {"TEXT": "text"},
            "optionTypes": {"CASE": "text case"},
            "optionTranslation": {"OPTION": "CASE"},
        },
        # Operators: Math Part 2
        "operator_mod": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "(NUM1) mod (NUM2)",
            "inputTypes": {"NUM1": "text", "NUM2": "text"},
            "optionTypes": {},
        },
        "operator_round": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "round (NUM)",
            "inputTypes": {"NUM": "number"},
            "optionTypes": {},
        },
        "operator_mathop": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "[OPERATION] of (NUM)",
            "inputTypes": {"NUM": "number"},
            "optionTypes": {"OPERATION": "unary math operation"},
            "optionTranslation": {"OPERATOR": "OPERATION"},
        },
        "operator_stringify": {
            "type": "textReporter",
            "category": "Operators",
            "newOpcode": "(VALUE)",
            "inputTypes": {"VALUE": "text"},
            "inputTranslation": {"ONE": "VALUE"},
            "optionTypes": {},
        },
        "operator_boolify": {
            "type": "booleanReporter",
            "category": "Operators",
            "newOpcode": "(VALUE) as a boolean",
            "inputTypes": {"VALUE": "text"},
            "inputTranslation":  {"ONE": "VALUE"},
            "optionTypes": {},
        },
    # Variables
        "data_setvariableto": {
            "type": "instruction",
            "category": "Variables",
            "newOpcode": "set [VARIABLE] to (VALUE)",
            "inputTypes": {"VALUE": "text"},
            "optionTypes": {"VARIABLE": "variable"},
        },
        "data_changevariableby": {
            "type": "instruction",
            "category": "Variables",
            "newOpcode": "change [VARIABLE] by (VALUE)",
            "inputTypes": {"VALUE": "number"},
            "optionTypes": {"VARIABLE": "variable"},
        },
        "data_showvariable": {
            "type": "instruction",
            "category": "Variables",
            "newOpcode": "show variable [VARIABLE]",
            "inputTypes": {},
            "optionTypes": {"VARIABLE": "variable"},
        },
        "data_hidevariable": {
            "type": "instruction",
            "category": "Variables",
            "newOpcode": "hide variable [VARIABLE]",
            "inputTypes": {},
            "optionTypes": {"VARIABLE": "variable"},
        },
    # Lists
        "data_addtolist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "add (ITEM) to [LIST]",
            "inputTypes": {"ITEM": "text"},
            "optionTypes": {"LIST": "list"},
        },
        "data_deleteoflist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "delete (INDEX) of [LIST]",
            "inputTypes": {"INDEX": "integer"},
            "optionTypes": {"LIST": "list"},
        },
        "data_deletealloflist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "delete all of [LIST]",
            "inputTypes": {},
            "optionTypes": {"LIST": "list"},
        },
        "data_shiftlist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "shift [LIST] by (INDEX)",
            "inputTypes": {"INDEX": "integer"},
            "optionTypes": {"LIST": "list"},
        },
        "data_insertatlist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "insert (ITEM) at (INDEX) of [LIST]",
            "inputTypes": {"ITEM": "text", "INDEX": "integer"},
            "optionTypes": {"LIST": "list"},
        },
        "data_replaceitemoflist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "replace item (INDEX) of [LIST] with (ITEM)",
            "inputTypes": {"INDEX": "integer", "ITEM": "text"},
            "optionTypes": {"LIST": "list"},
        },
        "data_listforeachitem": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "For each item [VARIABLE] in [LIST] {BODY}",
            "inputTypes": {"BODY": "script"},
            "inputTranslation": {"SUBSTACK": "BODY"},
            "optionTypes": {"VARIABLE": "variable", "LIST": "list"},
        },
        "data_listforeachnum": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "For each item # [VARIABLE] in [LIST] {BODY}",
            "inputTypes": {"BODY": "script"},
            "inputTranslation": {"SUBSTACK": "BODY"},
            "optionTypes": {"VARIABLE": "variable", "LIST": "list"},
        },
        "data_itemoflist": {
            "type": "textReporter",
            "category": "Lists",
            "newOpcode": "item (INDEX) of [LIST]",
            "inputTypes": {"INDEX": "integer"},
            "optionTypes": {"LIST": "list"},
        },
        "data_itemnumoflist": {
            "type": "textReporter",
            "category": "Lists",
            "newOpcode": "item # of (ITEM) in [LIST]",
            "inputTypes": {"ITEM": "text"},
            "optionTypes": {"LIST": "list"},
        },
        "data_amountinlist": {
            "type": "textReporter",
            "category": "Lists",
            "newOpcode": "amount of (VALUE) of [LIST]",
            "inputTypes": {"VALUE": "text"},
            "optionTypes": {"LIST": "list"},
        },
        "data_lengthoflist": {
            "type": "textReporter",
            "category": "Lists",
            "newOpcode": "length of [LIST]",
            "inputTypes": {},
            "optionTypes": {"LIST": "list"},
        },
        "data_listcontainsitem": {
            "type": "booleanReporter",
            "category": "Lists",
            "newOpcode": "[LIST] contains (ITEM) ?",
            "inputTypes": {"ITEM": "text"},
            "optionTypes": {"LIST": "list"},
        },
        "data_itemexistslist": {
            "type": "booleanReporter",
            "category": "Lists",
            "newOpcode": "item (INDEX) exists in [LIST] ?",
            "inputTypes": {"INDEX": "integer"},
            "optionTypes": {"LIST": "list"},
        },
        "data_listisempty": {
            "type": "booleanReporter",
            "category": "Lists",
            "newOpcode": "is [LIST] empty?",
            "inputTypes": {},
            "optionTypes": {"LIST": "list"},
        },
        "data_reverselist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "reverse [LIST]",
            "inputTypes": {},
            "optionTypes": {"LIST": "list"},
        },
        "data_arraylist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "set [LIST] to array (VALUE)",
            "inputTypes": {"VALUE": "text"},
            "optionTypes": {"LIST": "list"},
        },
        "data_listarray": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "get list [LIST] as an array",
            "inputTypes": {},
            "optionTypes": {"LIST": "list"},
        },
        "data_showlist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "show list [LIST]",
            "inputTypes": {},
            "optionTypes": {"LIST": "list"},
        },
        "data_hidelist": {
            "type": "instruction",
            "category": "Lists",
            "newOpcode": "hide list [LIST]",
            "inputTypes": {},
            "optionTypes": {"LIST": "list"},
        },
        
# EXTENSIONS (Incomplete)
    # JSON (jgJSON) (Incomplete)
        # JSON: Objects
        "jgJSON_getValueFromJSON": {
            "type": "textReporter",
            "category": "JSON",
            "newOpcode": "get (VALUE) from (JSON)",
            "inputTypes": {"VALUE": "text", "JSON": "text"},
            "optionTypes": {},
        },
        "jgJSON_setValueToKeyInJSON": {
            "type": "textReporter",
            "category": "JSON",
            "newOpcode": "set (KEY) to (VALUE) in (JSON)",
            "inputTypes": {"KEY": "text", "VALUE": "text", "JSON": "text"},
            "optionTypes": {},
        },
        # JSON: Arrays
        "jgJSON_json_array_push": {
            "type": "textReporter",
            "category": "JSON",
            "newOpcode": "in array (array) add (item)",
            "inputTypes": {"array": "text", "item": "text"},
            "optionTypes": {},
        },
        "jgJSON_json_array_get": {
            "type": "textReporter",
            "category": "JSON",
            "newOpcode": "in array (array) get (index)",
            "inputTypes": {"array": "text", "index": "number"},
            "optionTypes": {},
        },
        "jgJSON_json_array_length": {
            "type": "textReporter",
            "category": "JSON",
            "newOpcode": "length of array (array)",
            "inputTypes": {"array": "text"},
            "optionTypes": {},
        },
        "jgJSON_json_array_contains": {
            "type": "booleanReporter",
            "category": "JSON",
            "newOpcode": "array (array) contains (value) ?",
            "inputTypes": {"array": "text", "value": "text"},
            "optionTypes": {},
        },
    # SPECIAL
        # SPECIAL: Control (DO NOT CREATE THESE MANUALLY)
        "control_create_clone_of_menu": {
            "type": "textReporter",
            "category": "Control",
            "newOpcode": "CREATE CLONE MENU",
            "inputTypes": {},
            "optionTypes": {"TARGET": "cloning target"},
            "optionTranslation": {"CLONE_OPTION": "TARGET"},
        },
        "control_delete_clones_of_menu": {
            "type": "textReporter",
            "category": "Control",
            "newOpcode": "DELETE CLONES MENU",
            "inputTypes": {},
            "optionTypes": {"TARGET": "cloning target"},
            "optionTranslation": {"CLONE_OPTION": "TARGET"},
        },
        # SPECIAL: Varibles and Lists
        "special_variable_value": {
            "type": "textReporter",
            "category": "Variables",
            "newOpcode": "value of [VARIABLE]",
            "inputTypes": {},
            "optionTypes": {"VARIABLE": "variable"},
        },
        "special_list_value": {
            "type": "textReporter",
            "category": "Lists",
            "newOpcode": "value of [LIST]",
            "inputTypes": {},
            "optionTypes": {"LIST": "list"},
        },
        # SPECIAL: Custom Blocks
        "special_define": {
            "type": "hat",
            "category": "My Blocks",
            "newOpcode": "define ...",
            "inputTypes": {},
            "optionTypes": {"noScreenRefresh": "boolean", "blockType": "blockType", "customOpcode": "opcode"},
        },
        "procedures_call": {
            "type": "dynamic",
            "category": "My Blocks",
            "newOpcode": "call ...",
            "inputTypes": {},
            "optionTypes": {"customOpcode": "opcode"},
        },
        "procedures_return": {
            "type": "lastInstruction",
            "category": "My Blocks",
            "newOpcode": "return (return)",
            "inputTypes": {"return": "text"},
            "optionTypes": {},
        },
        "procedures_set": {
            "type": "instruction",
            "category": "My Blocks",
            "newOpcode": "set (PARAM) to (VALUE)",
            "inputTypes": {"PARAM": "round", "VALUE": "text"},
            "optionTypes": {},
        },
        "argument_reporter_string_number": {
            "type": "textReporter",
            "category": None,
            "newOpcode": "value of text [ARGUMENT]",
            "inputTypes": {},
            "optionTypes": {"ARGUMENT": "string"},
            "optionTranslation": {"VALUE": "ARGUMENT"},
        },
        "argument_reporter_boolean": {
            "type": "booleanReporter",
            "category": None,
            "newOpcode": "value of boolean [ARGUMENT]",
            "inputTypes": {},
            "optionTypes": {"ARGUMENT": "string"},
            "optionTranslation": {"VALUE": "ARGUMENT"},
        },       
}

inputDefault = {}
inputBlockDefault = None
inputTextDefault = ""
inputBlocksDefault = []
optionDefault = {}
commentDefault = None

inputModes = {
    "broadcast"       : "block-and-text",
    "integer"         : "block-and-text",
    "positive integer": "block-and-text",
    "positive number" : "block-and-text",
    "number"          : "block-and-text",
    "text"            : "block-and-text",
    "boolean"         : "block-only",
    "round"           : "block-only",
    "script"          : "script",
}


defaultCostume = {
    "name": "empty costume",
    "dataFormat": "svg",
    "fileStem": "cd21514d0531fdffb22204e0ec5ed84a",
    "bitmapResolution": 1,
    "rotationCenter": [0, 0]
}

defaultCostumeDeoptimized = {
    "name": "empty costume",
    "bitmapResolution": 1,
    "assetId": "cd21514d0531fdffb22204e0ec5ed84a",
    "dataFormat": "svg",
    "md5ext": "cd21514d0531fdffb22204e0ec5ed84a.svg",
    "rotationCenterX": 0,
    "rotationCenterY": 0
}

defaultCostumeFilePath = "assets/defaultCostume.svg"
